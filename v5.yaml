openapi: 3.1.0
info:
  title: Whop Apps API
  description: The Whop Apps API
  version: v5
servers:
  - url: https://api.whop.com/api
paths:
  "/v5/oauth/token":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - oauth
      operationId: post_api_v5_oauth_token
      summary: Create an OAuth Token
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OauthToken"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OauthTokenCreateBody"
      description: Exchange a code for a token
  "/v5/app":
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app
      operationId: get_api_v5_app
      summary: Retrieve the current app
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppApp"
        "403":
          $ref: "#/components/responses/Forbidden"
      description: Returns an App
  "/v5/app/billing_usages":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/billing_usages
      operationId: post_api_v5_app_billing_usages
      summary: Create a Billing Usage
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppBillingUsage"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppBillingUsageCreateBody"
      description: Create a billing usage for a company
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/billing_usages
      operationId: get_api_v5_app_billing_usages
      summary: List Billing Usages
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: membership_id
          in: query
          required: false
          description: An ID of a membership to filter by, which will look like mem_*************
          schema:
            type: string
        - name: billing_item_id
          in: query
          required: false
          description: An ID of a billing item to filter by, which will look like bi_*************
          schema:
            type: string
        - name: billing_item_identifier
          in: query
          required: false
          description: An identifier of a billing item to filter by.
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppBillingUsage"
                additionalProperties: false
                required:
                  - pagination
                  - data
      description: Returns a collection of billing usages
  "/v5/app/billing_usages/{id}":
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/billing_usages
      operationId: get_api_v5_app_billing_usages_id
      summary: Retrieve a Billing Usage
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the billing usage, which will look like bu_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppBillingUsage"
      description: Returns a billing usage
    delete:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/billing_usages
      operationId: delete_api_v5_app_billing_usages_id
      summary: Delete a Billing Usage
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the billing usage, which will look like bu_*************
          schema:
            type: string
      responses:
        "204":
          description: A successful response
      description: Deletes a billing usage
  "/v5/app/app_connections":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/app_connections
      operationId: post_api_v5_app_app_connections
      summary: Create an App Connection
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppAppConnection"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppAppConnectionCreateBody"
      description: Create an app connection for an object
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/app_connections
      operationId: get_api_v5_app_app_connections
      summary: List App Connections
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: resource_id
          in: query
          required: false
          description: An ID of an object to filter by, which will look like prod_*************
          schema:
            type: string
        - name: resource_type
          in: query
          required: false
          description: The type of resource to filter by, ex 'product'.
          schema:
            type: string
            enum:
              - product
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppAppConnection"
                additionalProperties: false
                required:
                  - pagination
                  - data
      description: Returns a collection of app connections
  "/v5/app/activity_feed_items":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/activity_feed_items
      operationId: post_api_v5_app_activity_feed_items
      summary: Create an Activity Feed Item
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppActivityFeedItem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppActivityFeedItemCreateBody"
      description: Create an activity feed object (aka a post)
  "/v5/app/activity_feed_items/{external_id}":
    delete:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/activity_feed_items
      operationId: delete_api_v5_app_activity_feed_item
      summary: Delete an Activity Feed Item
      parameters:
        - name: external_id
          in: path
          required: true
          description: The external ID of the activity feed item
          schema:
            type: string
      responses:
        "204":
          description: A successful response
      description: Deletes an Activity Feed Item
    patch:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/activity_feed_items
      operationId: update_api_v5_app_activity_feed_item
      summary: Update an Activity Feed Item
      parameters:
        - name: external_id
          in: path
          required: true
          description: The external ID of the activity feed item
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppActivityFeedItemUpdateBody"
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppActivityFeedItem"
  "/v5/app/app_connections/{id}":
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/app_connections
      operationId: get_api_v5_app_app_connections_id
      summary: Retrieve an app connection
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the app connection, which will look like apco_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppAppConnection"
      description: Returns an app connection
    delete:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/app_connections
      operationId: delete_api_v5_app_app_connections_id
      summary: Delete an App Connection
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the app connection, which will look like apco_*************
          schema:
            type: string
      responses:
        "204":
          description: A successful response
      description: Deletes an App Connection
  "/v5/app/companies":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/companies
      operationId: get_api_v5_app_companies
      summary: List Companies
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppCompany"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"
      description: Returns a collection of companies
  "/v5/app/companies/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/companies
      operationId: get_api_v5_app_companies_id
      summary: Retrieve a Company
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Company, which will look like biz_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppCompany"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a company
  "/v5/app/experiences":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/experiences
      operationId: get_api_v5_app_experiences
      summary: List Experiences
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppExperience"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
      description: Returns a collection of experiences
  "/v5/app/experiences/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/experiences
      operationId: get_api_v5_app_experiences_id
      summary: Retrieve an Experience
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Experience, which will look like exp_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppExperience"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
      description: Returns an experience
  "/v5/app/line_items":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/line_items
      operationId: post_api_v5_app_line_items
      summary: Create a Line Item
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppLineItem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppLineItemCreateBody"
      description: Create a line item for a company
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/line_items
      operationId: get_api_v5_app_line_items
      summary: List Line Items
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppLineItem"
                additionalProperties: false
                required:
                  - pagination
                  - data
      description: Returns a collection of line items
  "/v5/app/line_items/{id}":
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/line_items
      operationId: get_api_v5_app_line_items_id
      summary: Retrieve a Line Item
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the line item, which will look like li_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppLineItem"
      description: Returns a line item
    delete:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/line_items
      operationId: delete_api_v5_app_line_items_id
      summary: Delete a Line Item
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the line item, which will look like li_*************
          schema:
            type: string
      responses:
        "204":
          description: A successful response

      description: Deletes a line item
    patch:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/line_items
      operationId: update_api_v5_app_line_items_id
      summary: Update a Line Item
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the line item, which will look like li_*************
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppLineItemUpdateBody"
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppLineItem"

      description: Updates a line item's metadata field
  "/v5/app/notification_topics":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/notification_topics
      operationId: post_api_v5_app_notification_topics
      summary: Create a Notification Topic
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppNotificationTopic"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppNotificationTopicCreateBody"
      description: Create a notification topic for a company
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/notification_topics
      operationId: get_api_v5_app_notification_topics
      summary: List Notification Topics
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          required: false
          description: A status to filter by.
          schema:
            type: string
            enum:
              - active
              - inactive
        - name: topic_type
          in: query
          required: false
          description: A topic type to filter by.
          schema:
            type: string
            enum:
              - company
              - user
        - name: send_once
          in: query
          required: false
          description: A boolean to filter by send_once
          schema:
            type: boolean
        - name: notification_channel_identifiers
          in: query
          required: false
          description: An array of notification channel identifiers to filter by.
          schema:
            type: array
            items:
              type: string
              enum:
                - email
                - sms
                - in_app
                - discord_dm
                - mobile
              description: The possible notification channel identifiers.
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppNotificationTopic"
                additionalProperties: false
                required:
                  - pagination
                  - data
      description: Returns a collection of notification topics
  "/v5/app/notification_topics/{id}":
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/notification_topics
      operationId: get_api_v5_app_notification_topics_id
      summary: Retrieve a Notification Topic
      parameters:
        - name: id
          in: path
          required: true
          description: The topic_identifier of the notification topic, which will be a string.
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppNotificationTopic"
      description: Returns a notification topic
    patch:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/notification_topics
      operationId: update_api_v5_app_notification_topics_id
      summary: Update a Notification Topic
      parameters:
        - name: id
          in: path
          required: true
          description: The topic_identifier of the notification topic, which will be a string.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppNotificationTopicUpdateBody"
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppNotificationTopic"
      description: Updates a notification topic
  "/v5/app/members":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/members
      operationId: get_api_v5_app_members
      summary: List Members
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: user_id
          in: query
          required: false
          description: An ID of a user to filter by, which will look like user_*************
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: A status to filter by.
          schema:
            type: string
            enum:
              - joined
              - left
        - name: experience_id
          in: query
          required: false
          description: An ID of an experience to filter by, which will look like exp_*************. If private, the member must have a valid membership on a product that grants them access to the experience. If public, the user must be a member of the company.
          schema:
            type: string
        - name: search
          in: query
          required: false
          description: A search to filter by. This will search the member's name and username.
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppMember"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of members
  "/v5/app/members/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/members
      operationId: get_api_v5_app_members_id
      summary: Retrieve a Member
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Member, which will look like mber_*************.
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppMember"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a member
  "/v5/app/authorized_users":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/authorized_users
      operationId: get_api_v5_app_authorized_users
      summary: List Authorized Users
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: user_id
          in: query
          required: false
          description: An ID of a user to filter by, which will look like user_*************
          schema:
            type: string
        - name: role
          in: query
          required: false
          description: A role to filter by.
          schema:
            type: string
            enum:
              - owner
              - admin
              - moderator
              - app_manager
        - name: search
          in: query
          required: false
          description: A search to filter by. This will search the authorized users' name and username.
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppAuthorizedUser"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of Authorized Users
  "/v5/app/authorized_users/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/authorized_users
      operationId: get_api_v5_app_authorized_users_id
      summary: Retrieve an Authorized User
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the AuthorizedUser, which will look like ausr_*************.
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppAuthorizedUser"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns an Authorized User
  "/v5/app/reviews":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/reviews
      operationId: get_api_v5_app_reviews
      summary: List Reviews
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: user_id
          in: query
          required: false
          description: An ID of a user to filter by, which will look like user_*************
          schema:
            type: string
        - name: stars
          in: query
          required: false
          description: The number of stars to filter by. Ex. 1, 2, 3, 4, or 5.
          schema:
            type: number
        - name: status
          in: query
          required: false
          description: A status to filter by.
          schema:
            type: string
            enum:
              - pending
              - published
              - removed
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppReview"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of reviews
  "/v5/app/reviews/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/reviews
      operationId: get_api_v5_app_reviews_id
      summary: Retrieve a Review
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Review, which will look like rev_*************.
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppReview"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a review
  "/v5/app/memberships":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/memberships
      operationId: get_api_v5_app_memberships
      summary: List Memberships
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: license_key
          in: query
          required: false
          description: A license key to filter by.
          schema:
            type: string
        - name: statuses
          in: query
          required: false
          description: An array of statuses to filter by.
          schema:
            type: array
            items:
              type: string
              enum:
                - active
                - trialing
                - past_due
                - completed
                - canceled
                - expired
                - unresolved
        - name: valid
          in: query
          required: false
          description: A boolean to filter by valid memberships
          schema:
            type: boolean
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppMembership"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of memberships
  "/v5/app/memberships/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/memberships
      operationId: get_api_v5_app_memberships_id
      summary: Retrieve a Membership
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Membership, which will look like mem_*************. This can also be the license key
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppMembership"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a membership
  "/v5/app/memberships/{id}/add_free_days":
    post:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/memberships
      operationId: post_api_v5_app_memberships_id_add_free_days
      summary: Add Free Days to Membership
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Membership, which will look like mem_*************. This can also be the license key
          schema:
            type: string
      responses:
        "200":
          description: A successful response with no content
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppMembershipAddFreeDaysBody"

      description: Adds free days to a membership
  "/v5/app/notifications/requests":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/notifications
      operationId: post_api_v5_app_notifications_requests
      summary: Create a Notification Request
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationRequestResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"
      description: Send a notification to a set of targets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationRequestBody"
  "/v5/app/notification_requests":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - app/notifications
      operationId: post_api_v5_app_notification_requests
      summary: Create a Notification Request
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationRequestResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"
      description: Send a notification to a set of targets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationRequestBody2"
  "/v5/app/payments":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/payments
      operationId: get_api_v5_app_payments
      summary: List Payments
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: in_app_payments
          in: query
          required: false
          description: A boolean of whether or not to return only payments made with a line item created by the app. If false, returns all payments without a line item.
          schema:
            type: boolean
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppPayment"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of payments
  "/v5/app/payments/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/payments
      operationId: get_api_v5_app_payments_id
      summary: Retrieve a Payment
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Payment, which will look like pay_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppPayment"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a payment
  "/v5/app/products":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/products
      operationId: get_api_v5_app_products
      summary: List Products
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppProduct"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of products
  "/v5/app/products/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/products
      operationId: get_api_v5_app_products_id
      summary: Retrieve a Product
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Product, which will look like prod_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppProduct"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a product
  "/v5/app/users":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/users
      operationId: list_api_v5_app_users
      summary: List all User
      parameters:
        - name: user_ids
          in: query
          required: true
          description: A list of user IDs
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AppUser"
                additionalProperties: false
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a user
  "/v5/app/users/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/users
      operationId: get_api_v5_app_users_id
      summary: Retrieve a User
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the User, which will look like user_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppUser"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a user
  "/v5/app/users/{user_id}/social_accounts":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - app/users
      operationId: get_api_v5_app_users_id_social_accounts
      summary: List a User's social accounts
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the User, which will look like user_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AppSocialAccount"
                additionalProperties: false
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"
      description: Returns a User's social accounts
  "/v5/company/users/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/users
      operationId: get_api_v5_company_users_id
      summary: Retrieve a User
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the User, which will look like user_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyUser"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a user
  "/v5/company/users/{user_id}/social_accounts":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/users
      operationId: get_api_v5_company_users_id_social_accounts
      summary: List a User's social accounts
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the User, which will look like user_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CompanySocialAccount"
                additionalProperties: false
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a User's social accounts
  "/v5/company/reviews":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/reviews
      operationId: get_api_v5_company_reviews
      summary: List Reviews
      parameters:
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: user_id
          in: query
          required: false
          description: An ID of a user to filter by, which will look like user_*************
          schema:
            type: string
        - name: stars
          in: query
          required: false
          description: The number of stars to filter by. Ex. 1, 2, 3, 4, or 5.
          schema:
            type: number
        - name: status
          in: query
          required: false
          description: A status to filter by.
          schema:
            type: string
            enum:
              - pending
              - published
              - removed
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CompanyReview"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of reviews
  "/v5/company/reviews/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/reviews
      operationId: get_api_v5_company_reviews_id
      summary: Retrieve a Review
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Review, which will look like rev_*************.
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyReview"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a review
  "/v5/company/billing_items":
    post:
      security:
        - ApiAuth: [api_key]
      tags:
        - company/billing_items
      operationId: post_api_v5_company_billing_items
      summary: Create a Billing Item
      responses:
        "201":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyBillingItem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyBillingItemCreateBody"
      description: Create a billing item
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - company/billing_items
      operationId: get_api_v5_company_billing_items
      summary: List Billing Items
      parameters:
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: app_id
          in: query
          required: false
          description: An ID of an app to filter by, which will look like app_*************
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: A status to filter by.
          schema:
            type: string
            enum:
              - active
              - archived
        - name: identifier
          in: query
          required: false
          description: An identifier to filter by.
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CompanyBillingItem"
                additionalProperties: false
                required:
                  - pagination
                  - data
      description: Returns a collection of billing items
  "/v5/company/billing_items/{id}":
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - company/billing_items
      operationId: get_api_v5_company_billing_items_id
      summary: Retrieve a Billing Item
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the billing item, which will look like bi_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyBillingItem"
      description: Returns a billing item
    patch:
      security:
        - ApiAuth: [api_key]
      tags:
        - company/billing_items
      operationId: update_api_v5_company_billing_items_id
      summary: Update a Billing Item
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the billing item, which will look like bi_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyBillingItem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyBillingItemUpdateBody"
      description: Updates a billing item
  "/v5/company/memberships":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/memberships
      operationId: get_api_v5_company_memberships
      summary: List Memberships
      parameters:
        - name: statuses
          in: query
          required: false
          description: An array of statuses to filter by.
          schema:
            type: array
            items:
              type: string
              enum:
                - active
                - trialing
                - past_due
                - completed
                - canceled
                - expired
                - unresolved
        - name: valid
          in: query
          required: false
          description: A boolean to filter by valid memberships
          schema:
            type: boolean
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: license_key
          in: query
          required: false
          description: A license key to filter by.
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CompanyMembership"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of memberships
  "/v5/company/memberships/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/memberships
      operationId: get_api_v5_company_memberships_id
      summary: Retrieve a Membership
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Membership, which will look like mem_*************. This can also be the license key
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyMembership"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a membership
    patch:
      security:
        - ApiAuth: [api_key]
      tags:
        - company/memberships
      operationId: update_api_v5_company_memberships_id
      summary: Update a Membership
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Membership, which will look like mem_*************. This can also be the license key
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyMembership"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyMembershipUpdateBody"
      description: Updates a membership's metadata
    delete:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/memberships
      operationId: delete_api_v5_company_memberships_id
      summary: Terminate a Membership
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Membership, which will look like mem_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyMembership"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Terminates the membership. No further payments will be made, and the customer will lose access. A terminated membership cannot be reactivated.
  "/v5/company/payments":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/payments
      operationId: get_api_v5_company_payments
      summary: List Payments
      parameters:
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CompanyPayment"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of payments
  "/v5/company/payments/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/payments
      operationId: get_api_v5_company_payments_id
      summary: Retrieve a Payment
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Payment, which will look like pay_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyPayment"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a payment
  "/v5/company/products":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/products
      operationId: get_api_v5_company_products
      summary: List Products
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CompanyProduct"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of products
  "/v5/company/products/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - company/products
      operationId: get_api_v5_company_products_id
      summary: Retrieve a Product
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Product, which will look like prod_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyProduct"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a product
  "/v5/company":
    get:
      security:
        - ApiAuth: [api_key]
      tags:
        - company
      operationId: get_api_v5_company
      summary: Retrieve the current company
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanyCompany"
        "403":
          $ref: "#/components/responses/Forbidden"
      description: Returns a company

  "/v5/me/experiences":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - me/experiences
      operationId: get_api_v5_me_experiences
      summary: List Experiences
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MeExperience"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
      description: Returns a collection of experiences
  "/v5/me/experiences/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - me/experiences
      operationId: get_api_v5_me_experiences_id
      summary: Retrieve an Experience
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Experience, which will look like exp_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeExperience"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
      description: Returns an experience
  "/v5/me":
    get:
      security:
        - ApiAuth: [user]
      tags:
        - me
      operationId: get_api_v5_me
      summary: Retrieve the current user
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeUser"
        "403":
          $ref: "#/components/responses/Forbidden"
      description: Returns a user
  "/v5/me/social_accounts":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - me
      operationId: get_api_v5_me_social_accounts
      summary: List a User's social accounts
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MeSocialAccount"
                additionalProperties: false
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"
      description: Returns a User's social accounts
  "/v5/me/reviews":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - me/reviews
      operationId: get_api_v5_me_reviews
      summary: List Reviews
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: stars
          in: query
          required: false
          description: The number of stars to filter by. Ex. 1, 2, 3, 4, or 5.
          schema:
            type: number
        - name: status
          in: query
          required: false
          description: A status to filter by.
          schema:
            type: string
            enum:
              - pending
              - published
              - removed
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MeReview"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of reviews
  "/v5/me/reviews/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - me/reviews
      operationId: get_api_v5_me_reviews_id
      summary: Retrieve a Review
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Review, which will look like rev_*************.
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeReview"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a review
  "/v5/me/memberships":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - me/memberships
      operationId: get_api_v5_me_memberships
      summary: List Memberships
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: statuses
          in: query
          required: false
          description: An array of statuses to filter by.
          schema:
            type: array
            items:
              type: string
              enum:
                - active
                - trialing
                - past_due
                - completed
                - canceled
                - expired
                - unresolved
        - name: valid
          in: query
          required: false
          description: A boolean to filter by valid memberships
          schema:
            type: boolean
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: license_key
          in: query
          required: false
          description: A license key to filter by.
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MeMembership"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of memberships
  "/v5/me/memberships/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - me/memberships
      operationId: get_api_v5_me_memberships_id
      summary: Retrieve a Membership
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Membership, which will look like mem_*************. This can also be the license key
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeMembership"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a membership
  "/v5/me/payments":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - me/payments
      operationId: get_api_v5_me_payments
      summary: List Payments
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: product_id
          in: query
          required: false
          description: An ID of a product to filter by, which will look like prod_*************
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MePayment"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of payments
  "/v5/me/payments/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - me/payments
      operationId: get_api_v5_me_payments_id
      summary: Retrieve a Payment
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Payment, which will look like pay_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MePayment"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a payment
  "/v5/me/products":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - me/products
      operationId: get_api_v5_me_products
      summary: List Products
      parameters:
        - name: company_id
          in: query
          required: false
          description: An ID of a company to filter by, which will look like biz_*************
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: The page number to retrieve
          schema:
            type: integer
            default: 1
        - name: per
          in: query
          required: false
          description: The number of resources to return per page. There is a limit of 50 results per page.
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MeProduct"
                additionalProperties: false
                required:
                  - pagination
                  - data
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a collection of products
  "/v5/me/products/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - me/products
      operationId: get_api_v5_me_products_id
      summary: Retrieve a Product
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Product, which will look like prod_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeProduct"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a product
  "/v5/me/companies/{id}":
    get:
      security:
        - ApiAuth: [api_key, user]
      tags:
        - me/companies
      operationId: get_api_v5_me_companies_id
      summary: Retrieve a Company
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the Company, which will look like biz_*************
          schema:
            type: string
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeCompany"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/Forbidden"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "400":
          $ref: "#/components/responses/InvalidParameters"

      description: Returns a company

components:
  securitySchemes:
    WebhookSignature:
      type: apiKey
      in: header
      name: x-whop-signature
    ApiAuth:
      type: http
      scheme: bearer
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InvalidParameters:
      description: Invalid Parameters
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string

    Pagination:
      type: object
      properties:
        current_page:
          type: number
          description: Current page number
        total_pages:
          type: number
          description: Total number of pages
        next_page:
          type: number
          description: Next page number
        prev_page:
          type: number
          description: Previous page number
        total_count:
          type: number
          description: Total number of records
      additionalProperties: false
      required:
        - current_page
        - total_pages
        - next_page
        - prev_page
        - total_count

    NotificationRequestBody:
      type: object
      properties:
        topic_identifier:
          type: string
        sender_user_id:
          type: string
        experience_id:
          type: string
        external_id:
          type: string
        link:
          type: string
        rest_path:
          type: string
        increments_badge:
          type: boolean
        targets:
          type: object
          properties:
            experience:
              type: string
            company:
              type: string
            company_team:
              type: string
            users:
              type: array
              items:
                type: string
        body:
          type: object
          properties:
            all:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
            mobile:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                content:
                  type: string
            in_app:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
      required:
        - topic_identifier
        - targets
        - body

    NotificationRequestBody2:
      type: object
      properties:
        sender_user_id:
          type: string
        external_id:
          type: string
        link:
          type: string
        rest_path:
          type: string
        target:
          type: object
          oneOf:
            - required: ["experience"]
              properties:
                experience:
                  type: string
            - required: ["company"]
              properties:
                company:
                  type: string
            - required: ["company_team"]
              properties:
                company_team:
                  type: string
        body:
          type: object
          required:
            - title
            - content
          properties:
            title:
              type: string
            subtitle:
              type: string
            content:
              type: string
        topics:
          type: array
          items:
            type: object
            required:
              - topic_identifier
            properties:
              topic_identifier:
                type: string
              users:
                type: array
                items:
                  type: string
      required:
        - target
        - body
        - topics

    NotificationRequestResponse:
      type: object
      properties:
        status:
          type: string
          example: "created"
        message:
          type: string
          example: "We will attempt to send out your notification. This is processed in a background job, so we cannot confirm how many notifications were sent in this request."
    OauthTokenCreateBody:
      type: object
      properties:
        grant_type:
          type: string
          enum:
            - authorization_code
          description: The grant type
        code:
          type: string
          description: The authorization code
        client_id:
          type: string
          description: The client ID of your oAuth application.
        client_secret:
          type: string
          description: The client secret of your oAuth application.
        redirect_uri:
          type: string
          description: The redirect URI
      required:
        - grant_type
        - code
        - client_id
        - client_secret
        - redirect_uri
    OauthToken:
      type: object
      properties:
        access_token:
          type: string
          description: The access token of the user
      required:
        - access_token
    AppApp:
      type: object
      properties:
        id:
          type: string
          description: The ID of the app, which will look like app_*************
        created_at:
          type: number
          description: The date the app was created as a unix timestamp.
        name:
          type: string
          description: The name of the app
        company_id:
          type: string
          description: The ID of the company that owns this app, which will look like biz_*************
        icon_url:
          type: string
          description: The URL of the app's icon
      required:
        - id
        - created_at
        - name
        - company_id
    AppProduct:
      type: object
      properties:
        id:
          type: string
          description: The ID of the product, which will look like prod_*************
        created_at:
          type: number
          description: The date the product was created
        name:
          type: string
          description: The name of the product
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        description:
          type: string
          description: The description of the product
        page_id:
          type: string
          description: The ID of the page, which will look like page_*************
        visibility:
          type: string
          enum:
            - visible
            - hidden
            - archived
            - quick_link
          description: The visibility of the product
      required:
        - id
        - created_at
        - name
        - company_id
        - page_id
        - visibility
    AppAuthorizedUser:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user, which will look like user_*************
        username:
          type: string
          description: The username of the authorized user
        email:
          type: string
          description: The email of the authorized user
        role:
          type: string
          description: The role of the user
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        user:
          $ref: "#/components/schemas/AppUser"
      required:
        - id
        - username
        - email
        - role
        - company_id
        - user
    AppCompany:
      type: object
      properties:
        id:
          type: string
          description: The ID of the company object, which will look like biz_*************
        created_at:
          type: number
          description: The date the company was created as a unix timestamp.
        title:
          type: string
          description: The title of the company
        image_url:
          type: string
          description: The URL of the company's image
        authorized_user:
          $ref: "#/components/schemas/AppAuthorizedUser"
        has_payment_method:
          type: boolean
          description: Whether or not the company has a payment method on file to charge for metered billing usage.
        route:
          type: string
          description: The route to the company's first/default page
      required:
        - id
        - created_at
        - title
    AppExperience:
      type: object
      properties:
        id:
          type: string
          description: The ID of the experience, which will look like exp_*************
        created_at:
          type: number
          description: The date the experience was created as a unix timestamp.
        name:
          type: string
          description: The name of the experience
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        product_ids:
          type: array
          items:
            type: string
            description: The ID of the product, which will look like prod_*************
        app_id:
          type: string
          description: The ID of the app that created the experience, which will look like app_*************
        app_icon_url:
          type: string
          description: The URL of the app's icon
        access_level:
          type: string
          enum:
            - public
            - private
          description: The access level of the experience
      required:
        - id
        - created_at
        - name
        - company_id
        - product_ids
        - app_id
    AppSocialAccount:
      type: object
      properties:
        service:
          type: string
          enum:
            - discord
            - twitter
          description: The type of social account that it is.
        username:
          type: string
          description: The username of the social account
        default:
          type: boolean
          description: Whether or not this is the default social account for the user's account for the provider.
        account_id:
          type: string
          description: The ID of the social account from the provider, like a discord ID or twitter ID.
        image_url:
          type: string
          description: A URL for the image of the social account.
      required:
        - service
        - default
        - account_id
    AppAppConnection:
      type: object
      properties:
        id:
          type: string
          description: The ID of the app connection, which will look like apco_*************
        created_at:
          type: number
          description: The date the billing usage was created as a unix timestamp.
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        app_id:
          type: string
          description: The ID of the app, which will look like app_*************
        resource_id:
          type: string
          description: The ID of the polymorphic resource for the connection. Ex. a product ID like prod_*************.
        resource_type:
          type: string
          description: The type of the polymorphic resource for the connection. Ex. 'product'
          enum:
            - product
        view_type:
          type: string
          description: The type of view for the connection.
          enum:
            - customer_before_checkout_view
      required:
        - id
        - created_at
        - company_id
        - app_id
        - resource_id
        - resource_type
        - view_type
    AppAppConnectionCreateBody:
      type: object
      properties:
        resource_id:
          type: string
          description: The ID of the polymorphic resource for the connection. Ex. a product ID like prod_*************.
        resource_type:
          type: string
          description: The type of the polymorphic resource for the connection. Ex. 'product'
          enum:
            - product
        view_type:
          type: string
          description: The type of view for the connection.
          enum:
            - customer_before_checkout_view
      required:
        - resource_id
        - resource_type
        - view_type
    AppActivityFeedItem:
      type: object
      properties:
        activity_feed_item_id:
          type: string
          description: The ID of the activity feed item, which will look like afi_*************
      required:
        - activity_feed_item_id
    AppActivityFeedItemCreateBody:
      type: object
      properties:
        experience_id:
          type: string
          description: The ID of the experience, which will look like exp_*************
        user_id:
          type: string
          description: The ID of the user, which will look like user_*************
        external_id:
          type: string
          description: The ID of the external object that this maps to, like a feed post
        link:
          type: string
          description: "The link that this feed post should open when clicked"
        rest_path:
          type: string
          description: "The relative path the user should be redirected to in the app"
        blocks:
          type: array
          description: The blocks of the post
          items:
            type: object
            properties:
              block_type:
                type: string
                description: "The type of the block"
              text_content:
                type: string
                description: "The textual content of the block, if applicable"
              metadata:
                type: object
                description: "Any additional metadata associated with the block"
            required:
              - block_type
      required:
        - experience_id
        - user_id
        - external_id
        - blocks
    AppActivityFeedItemUpdateBody:
      type: object
      properties:
        link:
          type: string
          description: "The link that this feed post should open when clicked"
        rest_path:
          type: string
          description: "The relative path the user should be redirected to in the app"
        blocks:
          type: array
          description: The blocks of the post
          items:
            type: object
            properties:
              block_type:
                type: string
                description: "The type of the block"
              text_content:
                type: string
                description: "The textual content of the block, if applicable"
              metadata:
                type: object
                description: "Any additional metadata associated with the block"
            required:
              - block_type

    AppBillingUsage:
      type: object
      properties:
        id:
          type: string
          description: The ID of the billing usage, which will look like bu_*************
        created_at:
          type: number
          description: The date the billing usage was created as a unix timestamp.
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        app_id:
          type: string
          description: The ID of the app, which will look like app_*************
        membership_id:
          type: string
          description: The ID of the membership, which will look like mem_*************
        billing_item_id:
          type: string
          description: The ID of the billing item, which will look like bi_*************
        quantity:
          type: number
          description: The quantity to charge for the billing item, if the billing item is structured.
        amount:
          type: number
          description: The amount to charge, if the billing item is variable.
        receipt_id:
          type: string
          description: The ID of the receipt, which will look like rec_*************
      required:
        - id
        - created_at
        - company_id
        - app_id
        - membership_id
        - billing_item_id
    AppBillingUsageCreateBody:
      type: object
      properties:
        billing_item_id:
          type: string
          description: The ID of the billing item, which will look like bi_*************. Supply this or the billing_item_identifier.
        billing_item_identifier:
          type: string
          description: The identifier of the billing item, which will be a string. Supply this or the billing_item_id.
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************. Supply this or the membership_id.
        membership_id:
          type: string
          description: The ID of the membership, which will look like mem_*************. Supply this or the company_id.
        amount:
          type: number
          description: The amount to charge, if the billing item is variable.
        quantity:
          type: number
          description: The quantity to charge for the billing item, if the billing item is structured.
    AppLineItem:
      type: object
      properties:
        id:
          type: string
          description: The ID of the line item, which will look like li_*************
        amount:
          type: number
          description: The amount (price) for the line item.
        base_currency:
          type: string
          enum:
            - usd
            - sgd
            - inr
            - aud
            - brl
            - cad
            - dkk
            - eur
            - nok
            - gbp
            - sek
            - chf
            - hkd
            - huf
            - jpy
            - mxn
            - myr
            - pln
            - czk
            - nzd
            - aed
            - cop
            - ron
            - thb
          description: A three letter currency code for the line item.
        description:
          type: string
          description: A textual description for the line item.
        allow_multiple_quantity:
          type: boolean
          description: Whether or not the line item can be purchased as multiple quantity.
        metadata:
          type: object
          description: A JSON object containing any additional metadata for the line item.
        name:
          type: string
          description: The name of the line item.
        created_at:
          type: integer
          description: The date the line item was created as a unix timestamp.
      required:
        - id
        - amount
        - base_currency
        - allow_multiple_quantity
        - name
        - created_at
    AppLineItemCreateBody:
      type: object
      properties:
        company_id:
          type: string
          description: The ID of the company to create the line item for, which will look like biz_*************
        amount:
          type: number
          description: The amount (price) for the line item.
        base_currency:
          type: string
          enum:
            - usd
            - sgd
            - inr
            - aud
            - brl
            - cad
            - dkk
            - eur
            - nok
            - gbp
            - sek
            - chf
            - hkd
            - huf
            - jpy
            - mxn
            - myr
            - pln
            - czk
            - nzd
            - aed
            - cop
            - ron
            - thb
          description: A three letter currency code for the line item.
        name:
          type: string
          description: The name of the line item.
        description:
          type: string
          description: A textual description for the line item.
        allow_multiple_quantity:
          type: boolean
          description: Whether or not the line item can be purchased as multiple quantity.
        metadata:
          type: object
          description: A JSON object containing any additional metadata for the line item.
      required:
        - company_id
        - amount
        - base_currency
        - allow_multiple_quantity
        - name
    AppLineItemUpdateBody:
      type: object
      properties:
        metadata:
          type: object
          description: A JSON object containing any additional metadata for the line item.
      required:
        - metadata
    AppNotificationTopic:
      type: object
      properties:
        app_id:
          type: string
          description: The ID of the app, which will look like app_*************
        created_at:
          type: number
          description: The date the notification topic was created as a unix timestamp.
        name:
          type: string
          description: The name of the notification topic
        topic_identifier:
          type: string
          description: The identifier of the notification topic
        description:
          type: string
          description: The description of the notification topic
        notification_channel_identifiers:
          type: array
          items:
            type: string
            enum:
              - email
              - sms
              - in_app
              - discord_dm
              - mobile
            description: The identifier of the notification channel
        send_once:
          type: boolean
          description: Whether or not the notification topic should only be sent once
        status:
          type: string
          enum:
            - active
            - inactive
          description: The status of the notification topic
        topic_type:
          type: string
          enum:
            - company
            - user
          description: The type of the notification topic
        urgent:
          type: boolean
          description: Whether or not the notification topic is urgent
        visibility:
          type: string
          enum:
            - visible
            - hidden
          description: The visibility of the notification topic
      required:
        - created_at
        - name
        - status
        - visibility
        - topic_type
        - send_once
        - topic_identifier
        - urgent
    AppNotificationTopicCreateBody:
      type: object
      properties:
        name:
          type: string
          description: The name of the notification topic
        topic_identifier:
          type: string
          description: The identifier of the notification topic
        description:
          type: string
          description: The description of the notification topic
        notification_channel_identifiers:
          type: array
          items:
            type: string
            enum:
              - email
              - sms
              - in_app
              - discord_dm
              - mobile
            description: The identifier of the notification channel
        send_once:
          type: boolean
          description: Whether or not the notification topic should only be sent once
        status:
          type: string
          enum:
            - active
            - inactive
          description: The status of the notification topic
        topic_type:
          type: string
          enum:
            - company
            - user
          description: The type of the notification topic
      required:
        - name
        - topic_type
        - notification_channel_identifiers
        - topic_identifier
    AppNotificationTopicUpdateBody:
      type: object
      properties:
        name:
          type: string
          description: The name of the notification topic
        topic_identifier:
          type: string
          description: The identifier of the notification topic
        description:
          type: string
          description: The description of the notification topic
        notification_channel_identifiers:
          type: array
          items:
            type: string
            enum:
              - email
              - sms
              - in_app
              - discord_dm
              - mobile
            description: The identifier of the notification channel
        send_once:
          type: boolean
          description: Whether or not the notification topic should only be sent once
        status:
          type: string
          enum:
            - active
            - inactive
          description: The status of the notification topic
        topic_type:
          type: string
          enum:
            - company
            - user
          description: The type of the notification topic
    AppReview:
      type: object
      properties:
        id:
          type: string
          description: The ID of the review, which will look like rev_*************
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        user_id:
          type: string
          description: The ID of the user, which will look like user_*************
        product_id:
          type: string
          description: The ID of the product, which will look like prod_*************
        status:
          type: string
          enum:
            - pending
            - published
            - removed
          description: The status of the review
        stars:
          type: number
          description: The rating of the review. It will be an integer between one and five.
        description:
          type: string
          description: The text response the user left for the review.
        joined_at:
          type: number
          description: The date the customer first joined the creator's whop as a unix timestamp.
        created_at:
          type: number
          description: The date the review was created as a unix timestamp.
      required:
        - id
        - company_id
        - user_id
        - product_id
        - status
        - stars
        - created_at
    AppMembership:
      type: object
      properties:
        id:
          type: string
          description: The ID of the membership, which will look like mem_*************
        product_id:
          type: string
          description: The ID of the product, which will look like prod_*************
        user_id:
          type: string
          description: The ID of the user, which will look like user_*************
        plan_id:
          type: string
          description: The ID of the plan, which will look like plan_*************
        page_id:
          type: string
          description: The ID of the page, which will look like page_*************
        created_at:
          type: number
          description: The time at which the Membership was created. Measured in seconds since the Unix epoch.
        expires_at:
          type: number
          description: The time of when the Membership is set to go expired
        renewal_period_start:
          type: number
          description: The UTC timestamp of when the Membership will begin
        renewal_period_end:
          type: number
          description: The UTC timestamp of when the Membership will end
        quantity:
          type: number
          description: The quantity purchased
        status:
          type: string
          enum:
            - trialing
            - active
            - past_due
            - completed
            - canceled
            - expired
            - unresolved
          description: The status of the membership
        valid:
          type: boolean
          description: Whether or not the membership is valid
        cancel_at_period_end:
          type: boolean
          description: Whether or not this membership is scheduled to cancel at the end of the renewal period.
        license_key:
          type: string
          description: The license key for the membership
        metadata:
          type: object
          description: The metadata for the membership
        checkout_id:
          type: string
          description: The ID of the checkout used to first purchase / generate the membership.
        affiliate_username:
          type: string
          description: The username of the affiliate that referred the customer to this membership, if any.
        manage_url:
          type: string
          description: The URL for the customer to manage their membership on whop.com.
        company_buyer_id:
          type: string
          description: The ID of the company that purchased/owns the membership. (For example, they installed an app). Looks like biz_*************
        marketplace:
          type: boolean
          description: Whether or not the membership was purchased through the whop marketplace.
      required:
        - id
        - product_id
        - plan_id
        - page_id
        - created_at
        - quantity
        - status
        - valid
        - manage_url
    AppMembershipAddFreeDaysBody:
      type: object
      properties:
        days:
          type: number
          description: The number of free days to add to the membership.
      required:
        - days
    AppPayment:
      type: object
      properties:
        id:
          type: string
          description: The ID of the payment, which will look like pay_*************
        membership_id:
          type: string
          description: The ID of the membership, which will look like mem_*************
        product_id:
          type: string
          description: The ID of the product, which will look like prod_*************
        user_id:
          type: string
          description: The ID of the user, which will look like user_*************
        plan_id:
          type: string
          description: The ID of the plan, which will look like plan_*************
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        line_item_id:
          type: string
          description: The line item this receipt was purchased with. This is for in-app purchases.
        created_at:
          type: number
          description: The time at which the Payment was created. Measured in seconds since the Unix epoch. Does not necessarily reflect the time the Payment was successful.
        paid_at:
          type: number
          description: The time at which the Payment was successful. Measured in seconds since the Unix epoch.
        refunded_at:
          type: number
          description: The time at which the Payment was refunded. Measured in seconds since the Unix epoch.
        last_payment_attempt:
          type: number
          description: The UTC timestamp of the last time the Payment was attempted
        next_payment_attempt:
          type: number
          description: The UTC timestamp of the next time the Payment will be attempted
        status:
          type: string
          enum:
            - paid
            - open
            - void
            - draft
            - uncollectible
          description: The status of the payment
        subtotal:
          type: number
          description: The amount paid by the User, before any discounts or taxes
        final_amount:
          type: number
          description: The total amount paid by the User, including any discounts or taxes
        currency:
          type: string
          enum:
            - usd
            - sgd
            - inr
            - aud
            - brl
            - cad
            - dkk
            - eur
            - nok
            - gbp
            - sek
            - chf
            - hkd
            - huf
            - jpy
            - mxn
            - myr
            - pln
            - czk
            - nzd
            - aed
            - cop
            - ron
            - thb
            - eth
          description: The three letter currency the Payment was made in
        refunded_amount:
          type: number
          description: The amount that was refunded to the User (if applicable)
        payments_failed:
          type: number
          description: The number of times the Payment has failed
        checkout_id:
          type: string
          description: The ID of the checkout used to execute this payment, if applicable.
        card_brand:
          type: string
          description: If the payment was made with a credit/debit card, the brand of the card.
        card_last_4:
          type: string
          description: The last 4 digits of the debit/credit card used to make the payment, if applicable.
        funding_method:
          type: string
          enum:
            - credit
            - debit
            - prepaid
            - unknown
          description: The funding method of the payment, if applicable.
        wallet_type:
          type: string
          enum:
            - apple_pay
            - google_pay
            - paypal
            - venmo
          description: The wallet type of the payment, if applicable.
        calculated_statement_descriptor:
          type: string
          description: The statement descriptor that appears on the customer's bank statement for the payment, if applicable.
        issuer_identification_number:
          type: string
          description: The IIN/BIN of the payment, if applicable.
        billing_usage_ids:
          type: array
          items:
            type: string
            description: The IDs of billing usages connected to this payment, which will look like bu_*************
        company_buyer_id:
          type: string
          description: The ID of the company that made the payment. (For example, they installed an app). Looks like biz_*************
      required:
        - id
        - company_id
        - created_at
        - status
        - subtotal
        - final_amount
        - currency
        - payments_failed
    AppUser:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user, which will look like user_*************
        name:
          type: string
          description: The first and last name of the user.
        username:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email of the user
        profile_pic_url:
          type: string
          description: The URL of the user's profile picture
        created_at:
          type: number
          description: The date the user was created as a unix timestamp.
      required:
        - id
        - username
        - created_at
    AppMember:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user, which will look like user_*************
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        user_id:
          type: string
          description: The ID of the user, which will look like user_*************
        status:
          type: string
          enum:
            - joined
            - left
            - drafted
          description: The status of the member
        most_recent_action:
          type: string
          description: The most recent action of the member
        joined_at:
          type: number
          description: The date the member was created as a unix timestamp.
        user:
          $ref: "#/components/schemas/AppUser"
      required:
        - id
        - company_id
        - status
        - joined_at
    CompanyReview:
      type: object
      properties:
        id:
          type: string
          description: The ID of the review, which will look like rev_*************
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        user_id:
          type: string
          description: The ID of the user, which will look like user_*************
        product_id:
          type: string
          description: The ID of the product, which will look like prod_*************
        status:
          type: string
          enum:
            - pending
            - published
            - removed
          description: The status of the review
        stars:
          type: number
          description: The rating of the review. It will be an integer between one and five.
        description:
          type: string
          description: The text response the user left for the review.
        joined_at:
          type: number
          description: The date the customer first joined the creator's whop as a unix timestamp.
        created_at:
          type: number
          description: The date the review was created as a unix timestamp.
      required:
        - id
        - company_id
        - user_id
        - product_id
        - status
        - stars
        - created_at
    CompanyBillingItem:
      type: object
      properties:
        id:
          type: string
          description: The ID of the billing item, which will look like bi_*************
        identifier:
          type: string
          description: An identifier for the billing item that is unique across all billing items for the product in respect to the app.
        name:
          type: string
          description: The name of the billing item.
        status:
          type: string
          enum:
            - active
            - archived
          description: The status of the billing item.
        product_id:
          type: string
          description: The ID of the product, which will look like prod_*************
        app_id:
          type: string
          description: The ID of the app, which will look like app_*************
        billing_type:
          type: string
          enum:
            - structured
            - variable
          description: The billing type of the billing item.
        created_at:
          type: integer
          description: The date the billing item was created as a unix timestamp.
        currency:
          type: string
          enum:
            - usd
            - sgd
            - inr
            - aud
            - brl
            - cad
            - dkk
            - eur
            - nok
            - gbp
            - sek
            - chf
            - hkd
            - huf
            - jpy
            - mxn
            - myr
            - pln
            - czk
            - nzd
            - aed
            - cop
            - ron
            - thb
          description: The three letter currency code for the billing item.
        unit_name:
          type: string
          description: The name of the unit for the billing item.
        unit_per_price:
          type: integer
          description: The unit per price / unit amount for the billing item.
        unit_price:
          type: number
          description: The unit price for the billing item.
      required:
        - id
        - name
        - status
        - product_id
        - app_id
        - billing_type
        - created_at
        - currency
    CompanyBillingItemCreateBody:
      type: object
      properties:
        identifier:
          type: string
          description: An identifier for the billing item that is unique across all billing items for the product in respect to the app.
        name:
          type: string
          description: The name of the billing item.
        product_id:
          type: string
          description: The ID of the product, which will look like prod_*************
        billing_type:
          type: string
          enum:
            - structured
            - variable
          description: The billing type of the billing item.
        currency:
          type: string
          enum:
            - usd
            - sgd
            - inr
            - aud
            - brl
            - cad
            - dkk
            - eur
            - nok
            - gbp
            - sek
            - chf
            - hkd
            - huf
            - jpy
            - mxn
            - myr
            - pln
            - czk
            - nzd
            - aed
            - cop
            - ron
            - thb
          description: The three letter currency code for the billing item.
        unit_name:
          type: string
          description: The name of the unit for the billing item. Only for structured billing items.
        unit_per_price:
          type: integer
          description: The unit per price / unit amount for the billing item. Only for structured billing items.
        unit_price:
          type: number
          description: The unit price for the billing item. Only for structured billing items.
      required:
        - name
        - product_id
        - billing_type
        - currency
    CompanyBillingItemUpdateBody:
      type: object
      properties:
        status:
          type: string
          enum:
            - active
            - archived
          description: The status of the billing item.
      required:
        - status
    CompanyProduct:
      type: object
      properties:
        id:
          type: string
          description: The ID of the product, which will look like prod_*************
        created_at:
          type: number
          description: The date the product was created
        name:
          type: string
          description: The name of the product
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        description:
          type: string
          description: The description of the product
        page_id:
          type: string
          description: The ID of the page, which will look like page_*************
        visibility:
          type: string
          enum:
            - visible
            - hidden
            - archived
            - quick_link
          description: The visibility of the product
      required:
        - id
        - created_at
        - name
        - company_id
        - page_id
        - visibility
    CompanyAuthorizedUser:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user, which will look like user_*************
        username:
          type: string
          description: The username of the authorized user
        email:
          type: string
          description: The email of the authorized user
        role:
          type: string
          description: The role of the user
      required:
        - id
        - username
        - email
        - role
    CompanyCompany:
      type: object
      properties:
        id:
          type: string
          description: The ID of the company object, which will look like biz_*************
        created_at:
          type: number
          description: The date the company was created as a unix timestamp.
        title:
          type: string
          description: The title of the company
        image_url:
          type: string
          description: The URL of the company's image
        authorized_user:
          $ref: "#/components/schemas/CompanyAuthorizedUser"
        route:
          type: string
          description: The route to the company's first/default page
      required:
        - id
        - created_at
        - title
    CompanyExperience:
      type: object
      properties:
        id:
          type: string
          description: The ID of the experience, which will look like exp_*************
        created_at:
          type: number
          description: The date the experience was created as a unix timestamp.
        name:
          type: string
          description: The name of the experience
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        product_ids:
          type: array
          items:
            type: string
            description: The ID of the product, which will look like prod_*************
        app_id:
          type: string
          description: The ID of the app that created the experience, which will look like app_*************
        app_icon_url:
          type: string
          description: The URL of the app's icon
        access_level:
          type: string
          enum:
            - public
            - private
          description: The access level of the experience
      required:
        - id
        - created_at
        - name
        - company_id
        - product_ids
        - app_id
    CompanyLineItem:
      type: object
      properties:
        id:
          type: string
          description: The ID of the line item, which will look like li_*************
        amount:
          type: number
          description: The amount (price) for the line item.
        base_currency:
          type: string
          enum:
            - usd
            - sgd
            - inr
            - aud
            - brl
            - cad
            - dkk
            - eur
            - nok
            - gbp
            - sek
            - chf
            - hkd
            - huf
            - jpy
            - mxn
            - myr
            - pln
            - czk
            - nzd
            - aed
            - cop
            - ron
            - thb
          description: A three letter currency code for the line item.
        description:
          type: string
          description: A textual description for the line item.
        allow_multiple_quantity:
          type: boolean
          description: Whether or not the line item can be purchased as multiple quantity.
        metadata:
          type: object
          description: A JSON object containing any additional metadata for the line item.
        name:
          type: string
          description: The name of the line item.
        created_at:
          type: integer
          description: The date the line item was created as a unix timestamp.
      required:
        - id
        - amount
        - base_currency
        - allow_multiple_quantity
        - name
        - created_at
    CompanyMembership:
      type: object
      properties:
        id:
          type: string
          description: The ID of the membership, which will look like mem_*************
        product_id:
          type: string
          description: The ID of the product, which will look like prod_*************
        user_id:
          type: string
          description: The ID of the user, which will look like user_*************
        plan_id:
          type: string
          description: The ID of the plan, which will look like plan_*************
        page_id:
          type: string
          description: The ID of the page, which will look like page_*************
        created_at:
          type: number
          description: The time at which the Membership was created. Measured in seconds since the Unix epoch.
        expires_at:
          type: number
          description: The time of when the Membership is set to go expired
        renewal_period_start:
          type: number
          description: The UTC timestamp of when the Membership will begin
        renewal_period_end:
          type: number
          description: The UTC timestamp of when the Membership will end
        quantity:
          type: number
          description: The quantity purchased
        status:
          type: string
          enum:
            - trialing
            - active
            - past_due
            - completed
            - canceled
            - expired
            - unresolved
          description: The status of the membership
        valid:
          type: boolean
          description: Whether or not the membership is valid
        cancel_at_period_end:
          type: boolean
          description: Whether or not this membership is scheduled to cancel at the end of the renewal period.
        license_key:
          type: string
          description: The license key for the membership
        metadata:
          type: object
          description: The metadata for the membership
        checkout_id:
          type: string
          description: The ID of the checkout used to first purchase / generate the membership.
        affiliate_username:
          type: string
          description: The username of the affiliate that referred the customer to this membership, if any.
        manage_url:
          type: string
          description: The URL for the customer to manage their membership on whop.com.
        company_buyer_id:
          type: string
          description: The ID of the company that purchased/owns the membership. (For example, they installed an app). Looks like biz_*************
        marketplace:
          type: boolean
          description: Whether or not the membership was purchased through the whop marketplace.
      required:
        - id
        - product_id
        - plan_id
        - page_id
        - created_at
        - quantity
        - status
        - valid
        - manage_url
    CompanyMembershipUpdateBody:
      type: object
      properties:
        metadata:
          type: object
          description: The metadata for the membership.
      required:
        - metadata
    CompanyPayment:
      type: object
      properties:
        id:
          type: string
          description: The ID of the payment, which will look like pay_*************
        membership_id:
          type: string
          description: The ID of the membership, which will look like mem_*************
        product_id:
          type: string
          description: The ID of the product, which will look like prod_*************
        user_id:
          type: string
          description: The ID of the user, which will look like user_*************
        plan_id:
          type: string
          description: The ID of the plan, which will look like plan_*************
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        line_item_id:
          type: string
          description: The line item this receipt was purchased with. This is for in-app purchases.
        created_at:
          type: number
          description: The time at which the Payment was created. Measured in seconds since the Unix epoch. Does not necessarily reflect the time the Payment was successful.
        paid_at:
          type: number
          description: The time at which the Payment was successful. Measured in seconds since the Unix epoch.
        refunded_at:
          type: number
          description: The time at which the Payment was refunded. Measured in seconds since the Unix epoch.
        last_payment_attempt:
          type: number
          description: The UTC timestamp of the last time the Payment was attempted
        next_payment_attempt:
          type: number
          description: The UTC timestamp of the next time the Payment will be attempted
        status:
          type: string
          enum:
            - paid
            - open
            - void
            - draft
            - uncollectible
          description: The status of the payment
        subtotal:
          type: number
          description: The amount paid by the User, before any discounts or taxes
        final_amount:
          type: number
          description: The total amount paid by the User, including any discounts or taxes
        currency:
          type: string
          enum:
            - usd
            - sgd
            - inr
            - aud
            - brl
            - cad
            - dkk
            - eur
            - nok
            - gbp
            - sek
            - chf
            - hkd
            - huf
            - jpy
            - mxn
            - myr
            - pln
            - czk
            - nzd
            - aed
            - cop
            - ron
            - thb
            - eth
          description: The three letter currency the Payment was made in
        refunded_amount:
          type: number
          description: The amount that was refunded to the User (if applicable)
        payments_failed:
          type: number
          description: The number of times the Payment has failed
        checkout_id:
          type: string
          description: The ID of the checkout used to execute this payment, if applicable.
        card_brand:
          type: string
          description: If the payment was made with a credit/debit card, the brand of the card.
        card_last_4:
          type: string
          description: The last 4 digits of the debit/credit card used to make the payment, if applicable.
        funding_method:
          type: string
          enum:
            - credit
            - debit
            - prepaid
            - unknown
          description: The funding method of the payment, if applicable.
        wallet_type:
          type: string
          enum:
            - apple_pay
            - google_pay
            - paypal
            - venmo
          description: The wallet type of the payment, if applicable.
        calculated_statement_descriptor:
          type: string
          description: The statement descriptor that appears on the customer's bank statement for the payment, if applicable.
        issuer_identification_number:
          type: string
          description: The IIN/BIN of the payment, if applicable.
        billing_usage_ids:
          type: array
          items:
            type: string
            description: The IDs of billing usages connected to this payment, which will look like bu_*************
        company_buyer_id:
          type: string
          description: The ID of the company that made the payment. (For example, they installed an app). Looks like biz_*************
        billing_address:
          $ref: "#/components/schemas/BillingAddress"
        user_email:
          type: string
          description: The email of the user that made the payment
        user_username:
          type: string
          description: The username of the user that made the payment
      required:
        - id
        - company_id
        - created_at
        - status
        - subtotal
        - final_amount
        - currency
        - payments_failed
    CompanyUser:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user, which will look like user_*************
        name:
          type: string
          description: The first and last name of the user.
        username:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email of the user
        profile_pic_url:
          type: string
          description: The URL of the user's profile picture
      required:
        - id
        - username
    CompanySocialAccount:
      type: object
      properties:
        service:
          type: string
          enum:
            - discord
            - twitter
          description: The type of social account that it is.
        username:
          type: string
          description: The username of the social account
        default:
          type: boolean
          description: Whether or not this is the default social account for the user's account for the provider.
        account_id:
          type: string
          description: The ID of the social account from the provider, like a discord ID or twitter ID.
        image_url:
          type: string
          description: A URL for the image of the social account.
      required:
        - service
        - default
        - account_id
    MeProduct:
      type: object
      properties:
        id:
          type: string
          description: The ID of the product, which will look like prod_*************
        created_at:
          type: number
          description: The date the product was created
        name:
          type: string
          description: The name of the product
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        description:
          type: string
          description: The description of the product
        page_id:
          type: string
          description: The ID of the page, which will look like page_*************
        visibility:
          type: string
          enum:
            - visible
            - hidden
            - archived
            - quick_link
          description: The visibility of the product
      required:
        - id
        - created_at
        - name
        - company_id
        - page_id
        - visibility
    MeAuthorizedUser:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user, which will look like user_*************
        username:
          type: string
          description: The username of the authorized user
        email:
          type: string
          description: The email of the authorized user
        role:
          type: string
          description: The role of the user
      required:
        - id
        - username
        - email
        - role
    MeCompany:
      type: object
      properties:
        id:
          type: string
          description: The ID of the company object, which will look like biz_*************
        created_at:
          type: number
          description: The date the company was created as a unix timestamp.
        title:
          type: string
          description: The title of the company
        image_url:
          type: string
          description: The URL of the company's image
        authorized_user:
          $ref: "#/components/schemas/MeAuthorizedUser"
        route:
          type: string
          description: The route to the company's first/default page
      required:
        - id
        - created_at
        - title
    MeExperience:
      type: object
      properties:
        id:
          type: string
          description: The ID of the experience, which will look like exp_*************
        created_at:
          type: number
          description: The date the experience was created as a unix timestamp.
        name:
          type: string
          description: The name of the experience
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        product_ids:
          type: array
          items:
            type: string
            description: The ID of the product, which will look like prod_*************
        app_id:
          type: string
          description: The ID of the app that created the experience, which will look like app_*************
        app_icon_url:
          type: string
          description: The URL of the app's icon
        access_level:
          type: string
          enum:
            - public
            - private
          description: The access level of the experience
      required:
        - id
        - created_at
        - name
        - company_id
        - product_ids
        - app_id
    MeLineItem:
      type: object
      properties:
        id:
          type: string
          description: The ID of the line item, which will look like li_*************
        amount:
          type: number
          description: The amount (price) for the line item.
        base_currency:
          type: string
          enum:
            - usd
            - sgd
            - inr
            - aud
            - brl
            - cad
            - dkk
            - eur
            - nok
            - gbp
            - sek
            - chf
            - hkd
            - huf
            - jpy
            - mxn
            - myr
            - pln
            - czk
            - nzd
            - aed
            - cop
            - ron
            - thb
          description: A three letter currency code for the line item.
        description:
          type: string
          description: A textual description for the line item.
        allow_multiple_quantity:
          type: boolean
          description: Whether or not the line item can be purchased as multiple quantity.
        metadata:
          type: object
          description: A JSON object containing any additional metadata for the line item.
        name:
          type: string
          description: The name of the line item.
        created_at:
          type: integer
          description: The date the line item was created as a unix timestamp.
      required:
        - id
        - amount
        - base_currency
        - allow_multiple_quantity
        - name
        - created_at
    MeSocialAccount:
      type: object
      properties:
        service:
          type: string
          enum:
            - discord
            - twitter
          description: The type of social account that it is.
        username:
          type: string
          description: The username of the social account
        default:
          type: boolean
          description: Whether or not this is the default social account for the user's account for the provider.
        account_id:
          type: string
          description: The ID of the social account from the provider, like a discord ID or twitter ID.
        image_url:
          type: string
          description: A URL for the image of the social account.
      required:
        - service
        - default
        - account_id
    MeReview:
      type: object
      properties:
        id:
          type: string
          description: The ID of the review, which will look like rev_*************
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        user_id:
          type: string
          description: The ID of the user, which will look like user_*************
        product_id:
          type: string
          description: The ID of the product, which will look like prod_*************
        status:
          type: string
          enum:
            - pending
            - published
            - removed
          description: The status of the review
        stars:
          type: number
          description: The rating of the review. It will be an integer between one and five.
        description:
          type: string
          description: The text response the user left for the review.
        joined_at:
          type: number
          description: The date the customer first joined the creator's whop as a unix timestamp.
        created_at:
          type: number
          description: The date the review was created as a unix timestamp.
      required:
        - id
        - company_id
        - user_id
        - product_id
        - status
        - stars
        - created_at
    MeMembership:
      type: object
      properties:
        id:
          type: string
          description: The ID of the membership, which will look like mem_*************
        product_id:
          type: string
          description: The ID of the product, which will look like prod_*************
        user_id:
          type: string
          description: The ID of the user, which will look like user_*************
        plan_id:
          type: string
          description: The ID of the plan, which will look like plan_*************
        page_id:
          type: string
          description: The ID of the page, which will look like page_*************
        created_at:
          type: number
          description: The time at which the Membership was created. Measured in seconds since the Unix epoch.
        expires_at:
          type: number
          description: The time of when the Membership is set to go expired
        renewal_period_start:
          type: number
          description: The UTC timestamp of when the Membership will begin
        renewal_period_end:
          type: number
          description: The UTC timestamp of when the Membership will end
        quantity:
          type: number
          description: The quantity purchased
        status:
          type: string
          enum:
            - trialing
            - active
            - past_due
            - completed
            - canceled
            - expired
            - unresolved
          description: The status of the membership
        valid:
          type: boolean
          description: Whether or not the membership is valid
        cancel_at_period_end:
          type: boolean
          description: Whether or not this membership is scheduled to cancel at the end of the renewal period.
        license_key:
          type: string
          description: The license key for the membership
        metadata:
          type: object
          description: The metadata for the membership
        checkout_id:
          type: string
          description: The ID of the checkout used to first purchase / generate the membership.
        affiliate_username:
          type: string
          description: The username of the affiliate that referred the customer to this membership, if any.
        manage_url:
          type: string
          description: The URL for the customer to manage their membership on whop.com.
        company_buyer_id:
          type: string
          description: The ID of the company that purchased/owns the membership. (For example, they installed an app). Looks like biz_*************
        marketplace:
          type: boolean
          description: Whether or not the membership was purchased through the whop marketplace.
      required:
        - id
        - product_id
        - plan_id
        - page_id
        - created_at
        - quantity
        - status
        - valid
        - manage_url
    MePayment:
      type: object
      properties:
        id:
          type: string
          description: The ID of the payment, which will look like pay_*************
        membership_id:
          type: string
          description: The ID of the membership, which will look like mem_*************
        product_id:
          type: string
          description: The ID of the product, which will look like prod_*************
        user_id:
          type: string
          description: The ID of the user, which will look like user_*************
        plan_id:
          type: string
          description: The ID of the plan, which will look like plan_*************
        company_id:
          type: string
          description: The ID of the company, which will look like biz_*************
        line_item_id:
          type: string
          description: The line item this receipt was purchased with. This is for in-app purchases.
        created_at:
          type: number
          description: The time at which the Payment was created. Measured in seconds since the Unix epoch. Does not necessarily reflect the time the Payment was successful.
        paid_at:
          type: number
          description: The time at which the Payment was successful. Measured in seconds since the Unix epoch.
        refunded_at:
          type: number
          description: The time at which the Payment was refunded. Measured in seconds since the Unix epoch.
        last_payment_attempt:
          type: number
          description: The UTC timestamp of the last time the Payment was attempted
        next_payment_attempt:
          type: number
          description: The UTC timestamp of the next time the Payment will be attempted
        status:
          type: string
          enum:
            - paid
            - open
            - void
            - draft
            - uncollectible
          description: The status of the payment
        subtotal:
          type: number
          description: The amount paid by the User, before any discounts or taxes
        final_amount:
          type: number
          description: The total amount paid by the User, including any discounts or taxes
        currency:
          type: string
          enum:
            - usd
            - sgd
            - inr
            - aud
            - brl
            - cad
            - dkk
            - eur
            - nok
            - gbp
            - sek
            - chf
            - hkd
            - huf
            - jpy
            - mxn
            - myr
            - pln
            - czk
            - nzd
            - aed
            - cop
            - ron
            - thb
            - eth
          description: The three letter currency the Payment was made in
        refunded_amount:
          type: number
          description: The amount that was refunded to the User (if applicable)
        payments_failed:
          type: number
          description: The number of times the Payment has failed
        checkout_id:
          type: string
          description: The ID of the checkout used to execute this payment, if applicable.
        card_brand:
          type: string
          description: If the payment was made with a credit/debit card, the brand of the card.
        card_last_4:
          type: string
          description: The last 4 digits of the debit/credit card used to make the payment, if applicable.
        funding_method:
          type: string
          enum:
            - credit
            - debit
            - prepaid
            - unknown
          description: The funding method of the payment, if applicable.
        wallet_type:
          type: string
          enum:
            - apple_pay
            - google_pay
            - paypal
            - venmo
          description: The wallet type of the payment, if applicable.
        calculated_statement_descriptor:
          type: string
          description: The statement descriptor that appears on the customer's bank statement for the payment, if applicable.
        issuer_identification_number:
          type: string
          description: The IIN/BIN of the payment, if applicable.
        billing_usage_ids:
          type: array
          items:
            type: string
            description: The IDs of billing usages connected to this payment, which will look like bu_*************
        company_buyer_id:
          type: string
          description: The ID of the company that made the payment. (For example, they installed an app). Looks like biz_*************
        billing_address:
          $ref: "#/components/schemas/BillingAddress"
        user_email:
          type: string
          description: The email of the user that made the payment
      required:
        - id
        - company_id
        - created_at
        - status
        - subtotal
        - final_amount
        - currency
        - payments_failed
    MeUser:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user, which will look like user_*************
        name:
          type: string
          description: The first and last name of the user.
        username:
          type: string
          description: The username of the user
        email:
          type: string
          description: The email of the user
        profile_pic_url:
          type: string
          description: The URL of the user's profile picture
      required:
        - id
        - username
    BillingAddress:
      type: object
      properties:
        name:
          type: string
          description: The first and last name of the person
        line1:
          type: string
          description: The first line of the address
        line2:
          type: string
          description: The second line of the address
        city:
          type: string
          description: The city of the address
        state:
          type: string
          description: The state of the address
        postal_code:
          type: string
          description: The postal code of the address
        country:
          type: string
          description: The country of the address

webhooks:
  app-membership-went-valid:
    post:
      operationId: app-membership-went-valid
      security:
        - WebhookSignature: []
      summary: When a membership is purchased and goes valid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - app.membership_went_valid
                  example: "app.membership_went_valid"
                company:
                  type: string
                  example: biz_123
                data:
                  $ref: "#/components/schemas/AppMembership"
              required:
                - action
                - data
        required: true
  app-membership-went-invalid:
    post:
      operationId: app-membership-went-invalid
      security:
        - WebhookSignature: []
      summary: When a membership goes invalid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - app.membership_went_invalid
                  example: "app.membership_went_invalid"
                company:
                  type: string
                  example: biz_123
                data:
                  $ref: "#/components/schemas/AppMembership"
              required:
                - action
                - data
        required: true
  app-payment-succeeded:
    post:
      operationId: app-payment-succeeded
      security:
        - WebhookSignature: []
      summary: When a payment is successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - app.payment_succeeded
                  example: "app.payment_succeeded"
                company:
                  type: string
                  example: biz_123
                data:
                  $ref: "#/components/schemas/AppPayment"
              required:
                - action
                - data
        required: true
  app-payment-failed:
    post:
      operationId: app-payment-failed
      security:
        - WebhookSignature: []
      summary: When a payment fails
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - app.payment_failed
                  example: "app.payment_failed"
                company:
                  type: string
                  example: biz_123
                data:
                  $ref: "#/components/schemas/AppPayment"
              required:
                - action
                - data
        required: true
  membership-went-valid:
    post:
      operationId: membership-went-valid
      security:
        - WebhookSignature: []
      summary: When a membership is purchased and goes valid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - membership.went_valid
                  example: "membership.went_valid"
                data:
                  $ref: "#/components/schemas/AppMembership"
              required:
                - action
                - data
        required: true
  membership-went-invalid:
    post:
      operationId: membership-went-invalid
      security:
        - WebhookSignature: []
      summary: When a membership goes invalid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - membership.went_invalid
                  example: "membership.went_invalid"
                data:
                  $ref: "#/components/schemas/AppMembership"
              required:
                - action
                - data
        required: true
  payment-succeeded:
    post:
      operationId: payment-succeeded
      security:
        - WebhookSignature: []
      summary: When a payment is successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - payment.succeeded
                  example: "payment.succeeded"
                data:
                  $ref: "#/components/schemas/AppPayment"
              required:
                - action
                - data
        required: true
  payment-failed:
    post:
      operationId: payment-failed
      security:
        - WebhookSignature: []
      summary: When a payment fails
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - payment.failed
                  example: "payment.failed"
                data:
                  $ref: "#/components/schemas/AppPayment"
              required:
                - action
                - data
        required: true
